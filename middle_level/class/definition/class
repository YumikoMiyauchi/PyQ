# ここにBookクラスを作成します
class Book:
    """書籍管理用クラス"""
    
    def __init__(self, title, author, price):
        """属性を初期化"""
        self.title = title
        self.author = author
        self.price = price
        
    def book_info(self):
        """タイトル、著者と価格の文字列を作成"""
        return self.title + '[' + self.author +']:' + str(self.price)+'円'

def main():
    """メインの処理"""
    # インスタンスの作成
    book_1 = Book('天才', '石原 慎太郎', 1206)
    book_2 = Book('希望荘', '宮部 みゆき', 1890)

    # メソッドの利用
    print(book_1.book_info())
    print(book_2.book_info())

if __name__ == '__main__':
    main()
    
    
    
    本の情報を扱うBookクラスを作成します。クラスが内包するデータを属性と呼びます。
    属性はクラスのインスタンスごとのデータを保持します。self.titleのようなクラスに関わる情報です。

Bookクラスはタイトル（title)、著者（author)、価格（price)のデータを持ちます。(詳細な情報を表示させるために使う)
Bookクラスのbook_infoメソッドを実行すると、タイトル、著者、価格の情報を整形した表示用の文字列を作成します。


クラスを設計図とし、実体（インスタンス）を作成し利用します。

c1 = NewClass()
c2 = NewClass()

右辺にクラス名()と書いてインスタンスを作成します。c1とc2は別々のインスタンスです。作成時に値を渡したい場合は()の中に指定します。



__init__メソッド

__init__メソッドはクラスからインスタンスが生成された直後に実行される、特殊なメソッドです。
メソッドの書式は関数と同じです。メソッドの引数の1つ目には、インスタンス自身が渡されます。 selfという名前を使うのが慣習です。

class User(object):

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def info(self):
        return self.name + ':' + str(self.age)
        
        
 インスタンス作成時、クラス名に渡された引数は__init__メソッドに渡されています。クラスのメソッドの第1引数に指定されているselfは実際に呼び出し元から引数を設定する場合は無視します。
