from datetime import date, datetime
import os
import re

ITEM_TSV_PATH = 'items.tsv'
ORDER_DIR = 'order/'
FAILURE_DIR = 'failure/'
DELIVERY_DIR = 'delivery/'



class Items:
    """load_items()の結果を処理する"""
    def __init__ (self, items):
        self.items = items
        
    def has_id(self, item_id):
        """ item_id をもつ商品が存在するかチェックする
        """
        #list内の要素を1つずつ取ってきてそのidと引数のidを比較する
        #1つでも一致すればTrue、それ以外はFalseを返す
        for item in self.items:
            if item_id == item.item_id:
                return True
        return False
        

def load_items():
    """ ITEM_TSV_PATHのTSVからItemsを作る
    """

    i_list = []
    with open(ITEM_TSV_PATH, encoding='utf-8') as f:
        for row in f:
            col = row.rstrip().split('\t')
            i_id = col[0]
            i_name = col[1]
            i_price = col[2]
            item = Item(i_id, i_name, i_price)
            i_list.append(item)
    return Items(i_list)
            

def load_orders(target_date):
    """ ORDER_DIR のCSVからOrderのリストを作る

    * 各値の前後から空白を除外する
    """
    date_str = target_date.strftime('%Y%m%d')
    dir_list = []
    for filename in os.listdir(ORDER_DIR):
        if date_str not in filename:
            #対象日でないファイルは無視
            continue
        
        filepath = os.path.join(ORDER_DIR, filename)
        with open(filepath, encoding='utf-8') as f:
            for row in f:
                item_id, amount, address, tel, name, shipping_date = row.rstrip().split(',')
                order = Order(item_id, 
                              amount, 
                              address, 
                              tel, 
                              name, 
                              shipping_date,
                             filename)
                dir_list.append(order)
    return dir_list



    
    
    
宅配ショップのシステムを作る仕事を頼まれました。
電話で受付けた商品の配送依頼を、配送日ごとに振り分ける注文集計スクリプトを作ります。

この演習は単にプログラミングの知識だけでないスキルが求められます。
仕様を把握する、既存のプログラムを理解する、適切な処理を追記するスキルが必要になります。
実務的なスキルが試される難しい演習ですが多くのことを学べます。ぜひトライしてクリアしましょう。

以下の仕様で注文集計スクリプトを作ってほしいという仕事をもらいました。
すでにスクリプトの大まかな設計はできていて、後は足りないコードを追記していけば完成です。

仕様へのリンク

問題ごとに依頼されたプログラムを作っていきましょう。

現在あるコード

エディターを見ると現状完成している処理は3つです

Item(): 1商品の情報をもつクラス
Order(): 1つの注文を表すクラス
write_deliver_orders: Orderのリストから「日別注文ファイル」に書き込む関数
main(): 注文集計処理（毎日実行されるエントリーポイントです）
main関数の処理

main() は初めに呼び出される関数で、注文集計処理の全体を進める関数です。
処理を読むと以下のような順序で実行されているのが分かります。

引数に処理対象日を受け取る、指定がない場合は今日の日付を取得
商品マスターを load_items() で読み込み
load_orders(target_date) で今日の注文を取得
今日の注文1つ1つを order.validate(items) で正しい入力かチェック
注文された商品が存在するかなどもチェックするので、商品マスター items を order.validate() メソッドに渡しています
order.validate(items) の結果、正しいものを write_deliver_orders(...) 関数に渡して日別注文ファイルに書き込み
正しくないものを write_failure_orders(...) 関数に渡して「注文受付失敗ファイル」に書き込み
注文受付失敗ファイルはファイル名に取込処理した日を含むので target_date も関数に渡しています
足りない処理

以下の処理が現状の実装に足りません

Order クラスの Order.validate() メソッド: 注文のデータが正しい値かチェックするメソッド
load_items(): 商品マスター（ITEM_TSV_PATH）から商品の情報を読み出す関数
load_orders(target_date): 注文受付ファイルを ORDER_DIR から読み込んで Order のリストにして返す関数
write_failure_orders: Order のリストを受け取って注文受付け失敗ファイルを FAILURE_DIR に書き込む関数
これらを順次作って、注文集計処理を完成させましょう。

注意点

商品マスターや注文受付ファイルへのパスは main.py に ITEM_TSV_PATH、 ORDER_DIR、 FAILURE_DIR と DELIVERY_DIR があります。
パスにはこの値を必ず使ってください（この定数を使っていないとPyQのシステムがうまく動作を判定できません）。

# OK
open(ITEM_TSV_PATH)

# PyQのシステム都合でNGになります
open('items.tsv')

最初の仕事: 商品マスターの読み込み処理

main() 関数の始めの処理でもある商品マスター（ITEM_TSV_PATH）の読み込み処理を作りましょう。

Items クラス

あとで処理しやすいように load_items() 関数の結果は Items クラスのオブジェクトで返すようにします。
Items クラスは現状書かれていないので、以下の仕様で追記してください

__init__(self, items):
Item のリストを引数 items に受け取る
self.items に引数の値を保存する
has_id(self, item_id):
商品ID item_id を受け取る
self.items に引数の item_id を Item.item_id に持つ商品が1つでもあれば True を返す
なければ False を返す
load_items 関数

ITEM_TSV_PATH から商品マスターを読み込んで、 Items(...) のオブジェクトにして返してください。
処理の流れは以下のようになるでしょう。

空のリスト作成
ITEM_TSV_PATH を開く
開いたファイルを1行ずつ読み込む
1行を \t で分割してそれぞれ「商品ID」「商品名」「価格」の文字列を取る
行から取り出した各文字列を 文字列.strip() して前後のスペース、改行を取る
各文字列から Item のオブジェクトを作って、 1 で作ったリストに追加
item = Item(item_id, name, price) のようにして Item のオブジェクトを作る
全行読み終わったら 1 で作ったリストから Items オブジェクトを作成し、 load_items 関数から返す
