結合

join()を用いて、文字列の結合を行えます。split()の逆です。

print('-'.join(['a', 'b', 'c']))
# a-b-c


replace()は指定した文字列の一部を置換した結果を返します。第3引数に何個目まで置換するかを指定できます。省略した場合は当てはまる全文字列を置換します。

a = 'Hello, World'
b = a.replace('o', 'v')
print(b)
# Hellv, Wvrld

c = a.replace('o', 'v', 1)
print(c)
# Hellv, World


文字列の長さを求める

組み込み関数のlen()を利用すると文字列の長さを求めます。半角・全角関係なく、文字数をカウントします。

print(len('あいうえお'))
# 5

print(len('abcde'))
# 5




%を使ったスタイル

文字列 % データという形式で文字列にデータを差し込みます。文字列中に%とデータ型を表す文字を指定します。文字列と整数について紹介します。
その他の文字については6.1.3.1. 書式指定ミニ言語仕様を参照しましょう。

複数の値を置き換えたい場合は、%の後ろに()を書いてデータを並べます。

%s - 文字列
%d - 10進整数
x = 10
print('私は%d才です。' % x)
# 私は10才です。

name = '山田'
print('こんにちは%sさん' % name)
# こんにちは山田さん

print('%sさんは%d才です。' % (name, x))
# 山田さんは10才です。



str.format()の構文

文字列.format()を利用します。文字列中の{}にformat()で指定された値を設定します。指定方法がいくつかあります。

前から順に代入

空の{}とformat()の中の値を前から順に置き換えます。

print('{}, {}!'.format('Hello', 'World'))
# Hello, World!

print('{}, {}!'.format('World', 'Hello'))
# World, Hello!



ポジションを指定

format()の何番目の値を設定するかを{}の中に指定します。同じ値を何度も使えます。

print('{0}, {1}!'.format('Hello', 'World'))
# Hello, World!

print('{0}, {1}, {0}!'.format('Hello', 'World'))
# Hello, World, Hello!



キーワードを指定

{}にキーワードを指定し、そのキーワードを利用しての変換位置の指定も可能です。

message = '{x}, {y}'.format(x='Hello', y='World')
print(message)
