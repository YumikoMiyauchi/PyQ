前回までで元々のプログラムをまとまりごとに書き換えて、さらに関数に分離できました。
このクエストではモジュール（Pythonファイル）に処理や関数を分離する方法を学習しましょう。

前のクエストでCSVを読み込み/書き込みする処理を関数に分離しました。
CSV形式は一般的なファイルの形式なので、関数に分離することで再利用しやすいようにしました。

ですが実はPythonには標準で csv ライブラリーが付属しています。
自分で作った2つの関数を csv ライブラリーを使って書き換えることでプログラムの量を減らしましょう。


Pythonの標準ライブラリー csv を使って read_csv、write_csv の処理を置き換えました。

read_csv => csv.DictReader
write_csv => csv.DictWriter
csv.DictReader の使い方は今までの read_csv と同じです。
csv.DictWriter は少し違って、データの書き込みに writer.writerows(...) メソッドを使います。

with open('output/sales.csv', ...) as f:
    writer = csv.DictWriter(f, ['item_id', 'item_name'])
    writer.writerows([
        {'item_id': '1', 'item_name': '商品名'},
        ...
    ])



コラム: 標準ライブラリーを積極的に使おう

CSVのような一般的でよく使われるファイル形式の場合は、Python自体がライブラリーを持っています。
Python自身もCSV形式がよく使われることを知っており、誰もが簡単に使えるようライブラリーとして用意しています。

この考え方はとても大切です。十分に汎用的で使いまわせる処理は、必ずPythonの標準ライブラリーにあります。
プログラムを書く前や、関数に分離する中で「これって標準ライブラリーにないかな？」と考えるクセをつけておくと良いでしょう。
そうすることでプログラムを書く量を大幅に削減できます。

Pythonの標準ライブラリー一覧はドキュメントにも書かれているので便利なライブラリーがないか探してみると良いでしょう。
