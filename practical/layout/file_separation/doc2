CSVの読み書きする処理は標準ライブラリーに置き換えました。
しかし「売上データを読み込む処理」は標準ライブラリーにはないでしょう。

「売上データを読み込む処理」は、今回の架空の仕事上では汎用的に使いまわせそうです。
「CSVファイルを扱う処理」がPythonの csv にまとまっていたように、以下の2つのファイルに処理を分けましょう。

*item.py: 商品マスターデータを扱う処理をまとめる
*sales.py: 売上データを扱う処理をまとめる

売上生データの読み込み処理、売上データの書き込み処理を sales.py に、
商品マスターデータを読み込む処理を item.py に移動しましょう。




以下のように関数をそれぞれのPythonファイルに移動しました。

*item.py: read_items 関数と関連する定数
*sales.py: read_sales_raw 、 write_sales 関数と関連する定数
「商品マスターデータ」と「売上」に関数をまとめています。


Pythonファイルに分割する勘所は、意味は

それぞれのPythonファイルに分離したことで main.py の役割も明確になります。
main.py の処理は

商品マスターデータと売上生データから売上データを作成するプログラム

です。
この文中の「商品マスターデータ」という役割は main.py に直接は関係しません。
「商品マスターデータ」という「モノ」として意識しています（中身がCSVだろうが何だろうとも、 main.py からすればどうでも良い話です）。
その商品に関する役割を item.py にまとめることで、 main.py の直接の関心事から分離しています。

このように「モノ」や「役割」、「関心事」に注目して関数や定数を別々のPythonファイルに分離できます。

特に、仕様の中にあるデータや「モノ」に注目すると良いでしょう。
今回は「商品」や「売上」というモノが仕様から読み取れますので、それぞれのPythonファイルに分離しました。


Pythonファイルに分割する機会はいくつかあります。

ビジネス（お仕事）上の「データ」や「モノ」、「役割」ごとにまとめる場合
汎用的な処理をひとまとめにする場合
フレームワークやライブラリーが決めている場合
今回の item.py や sales.py は 1 の観点で分離しています。
Pythonファイルにプログラムを分離する場合は、このようにモノや役割を考えて分離すれば分かりやすくできるでしょう。
