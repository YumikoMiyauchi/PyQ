この「設計」の問題では「既存のPythonプログラムの改善と追加機能の開発を任された」
というストーリーを通して学んでいきます。

任されたプログラムはとても読みにくいですし、機能の追加もしていかなければいけません。
ですがこれはよくあることです。
キレイに書き直したり機能を追加する過程を通して、プログラムのより良い書き方や設計の方法を学んでいきましょう。

「設計」パートでは以下の内容を 学べます:
*Pythonプログラムを読みやすく書く方法
*関数への良い分割方法
*Pythonファイルの分け方
*クラスの分け方
*コマンドの設計

また以下は 学べません:
*たくさんのサーバーやプログラムが連携するシステムの設計方法
*大規模なアプリケーションの設計方法

小さなプログラムを通して、なぜ処理を分割すべきなのか、
どうやって分けるべきなのかという 設計の基本 を学びます。




設計にはまず仕様の理解を

プログラムを書く際には 「仕様」 がとても大切です。
エディターからプログラムを書きたい気持ちを少し抑えて、今回のプログラムで何をしたいのか、どんなプログラムを書く必要があるかを理解してから実際のプログラムを書き始めましょう。

特に以下に注目して仕様を理解しましょう。

*どんなデータが存在するのか
*どんなデータを作るべきなのか
*どんな処理が必要なのか

このようにプログラムの「データと入出力と処理」を常に意識しましょう。
これは大規模なシステムでも小規模なプログラムでも、何かプログラムを書くときには大切になります。



アプリケーションの仕様

今回、設計を学ぶ中で対象にするアプリケーションは「売上データ」を変換するPythonプログラムです。

以下、仕様が書かれているPDFです。

売上データ変換プログラムの仕様



現状の問題

現状、仕様を満たしたプログラムがすでに書かれています。
このプログラムは 2016年11月 の売上生データを対象に処理をするように作られているそうです。

とりあえず動作はする ようですが、以下のような問題があります。

*新しい機能を追加したいのにプログラムが読みにくい のでどうすればいいのか分からない
*処理対象の年月を変えるために 毎回プログラムを編集する必要がある
*仕様と現状のプログラムについては以上です。




任されたプログラムを見てみよう

任されたプログラムは main.py に書かれたプログラムです。
エディターで見てみましょう。見るだけでもかなり読みにくいプログラムです。

すべてのブロックが入れ子になっている
一度に覚えておくべき変数が多い
変数が何を意味しているのかが分かりにくい
また売上生データを1行1行処理するforループの中で、商品マスターデータファイルを読み込んでいるのも問題です。

with open(os.path.join('input/', name), encoding='utf-8') as f:
    for row in f:
        data = row.rstrip().split(',')

        with open('input/items.csv', encoding='utf-8') as items_f:
            for row in items_f:
                data2 = row.rstrip().split(',')

売上生データの行数の数だけ商品マスターデータファイルが開かれて、閉じられています。
プログラムの動作としても、とても無駄の多い書き方です。



仕様を元に処理の「まとまり」をイメージしよう

ここで仕様を思い出しつつ、プログラムでやるべきことを考えましょう。

売上生データと商品マスターデータを読み込む
売上生データの「商品ID」から「商品名」と「商品価格」を取得し、含める
売上データとして出力する
必要になりそうな処理の「まとまり」をイメージしてください。

対象の年月の売上生データを読み込む処理の「まとまり」
商品マスターデータを読み込む処理の「まとまり」
商品IDから商品（商品名、商品価格）を取得する処理の「まとまり」
売上データを作成する処理の「まとまり」
売上データを書き出す処理の「まとまり」
これが「設計」に必要なことです。
何かを書き始める前に、役割やまとまり、データに注目してプログラムの構成をイメージすることです。



始めの変更

まず現状のプログラムから、商品マスターデータを読み込む処理を「まとまり」として分離しましょう。
商品マスターデータの読み込みはループ内で行われているので、動作上も無駄が多い点ですので優先して行います。

プログラムを以下の2点変更しましょう。

input/items.csv を読み込んでいるwith文を分離する
「商品マスターデータ」を後で使いやすい形にしておく
CSVファイルから読み込んだ商品マスターデータを辞書に変換しておきます。
キーが「商品ID」で、値に「商品名」と「商品価格」を持つ辞書を作成します。

items = {
    "1": {
        "name": "商品名",
        "price": 380,
    },
    ...
}






商品マスターデータの読み込み

まず始めの処理で items 辞書に、商品マスターデータのCSVのデータを入れています。

items = {}
with open('input/items.csv'...):

ループの中で何度もファイルを開かないようにする
items 辞書とすることで後で商品IDから商品名などを取得しやすいようにする
for文で商品マスターデータの各行を読み込み、CSVの1要素目を商品ID、2要素目を商品名、3要素目を商品価格として読み込みます。
商品マスターデータの仕様が 商品ID,商品名,商品価格 の順になっていることを思い出してください。

このデータから items 辞書に、キーを商品IDとして、値を商品名と商品価格を含んだ辞書として設定しています。

items[item_id] = {
    'name': name,
    'price': price
}

items 辞書の値に、さらに辞書を入れています。
たとえば商品ID "1" の「商品名」は items["1"]["name"] のように取り出します。

items辞書を使って商品の取り出し

sales_f に書き込む処理では事前に作った items 辞書を使って「商品名」「商品価格」を取り出します。
with open('input/items.csv'...) の処理はループ内から削除しています。

商品生データCSVの3要素目を取り出て商品IDとしています。

item_id = data[2]

さらにこの値を元に、 items 辞書から商品名、商品価格を取得します。
items[item_id]['name'] のように取り出しています。

','.join(
    data[0],
    data[1],
    data[2],
    items[item_id]['name'],
    items[item_id]['price'],
    data[3],
    data[4],
)

まだまだ読みにくいプログラムですが、少し良くなってきました。




良いプログラムって？

どこで何をしているのか読みにくい == 可読性が低い
修正がしにくい。1箇所修正すると色々な場所で動かなくなる == 保守性が低い
過剰にファイルを開いて閉じている
元のプログラムは、プログラマーから見て「ソースコードの品質が低い」と言えます。



コラム: なぜこのプログラムが必要？

後ほどデータ集計や表計算ソフトで扱いやすいデータに変換します。
現時点の価格や商品名で記録しておきたい
商品マスターデータが値上げなどで変わることがある。でも売上の履歴としては当時の価格にする必要あり。
（売上生データには商品IDしかない）

また、このプログラムは他にもSQLを使ったり、Pythonのデータ処理ライブラリー pandas を使っても作れます。
ですが今回はPython標準の機能を使って実装しましょう。
