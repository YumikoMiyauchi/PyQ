さらに、 sales リストに入れる値を辞書に変えましょう。

前の問題で sales リストを作ることで、「データの作成」と「書き出し処理」を分割できましたが、
sales.append(...) 内の処理がまだ分かりにくいです。
売上データにはどのような値が、どのような順序で入っているかがプログラムを見るだけでは理解できません。
仕様とは違う順番で、「商品名」を追加していても気づくのは難しいでしょう。

そこで sales.append(...) では辞書を入れるようにしましょう。
売上データをファイルに書き出す処理で、その辞書を解釈して正しい順序でCSVに書き出します。

また、 sales リストを辞書のリストにすることで「売上データ」として扱いやすくなります。
仮に他の値を売上データに追加する必要がでてきても柔軟に対応できます。





`sales.append(...) で辞書を追加するようにしました。
この辞書には以下のようなキーがあります。それぞれ「売上データCSV」の仕様に合わせています。

purchase_id: 購入ID
user_id: ユーザーID
item_id: 商品ID
item_name: 商品名
item_price: 商品価格
amount: 個数
sold_at: 購入日時
こうすることによって「売上生データ」の各カラムが「売上データ」のどの値に対応しているかが分かりやすくなります。
たとえばCSVの1要素目 data[0] は「購入ID」ということが辞書のキー名を見るだけで一目瞭然となります。

sales.append({
    'purchase_id': data[0],
    'user_id': data[1],
    'item_id': item_id,
    'item_name': items[item_id]['name'],
    'item_price': items[item_id]['price'],
    ...
})

このように一旦辞書に値を入れることでプログラム内の値に名前が与えられるので、プログラム自体が仕様を説明してくれるようになります。

さらに売上データ書き込み時の columns というリストを見るだけで、「売上データCSV」に値がどんな順番で入っているか一目瞭然になります。

columns = ['purchase_id', 'user_id', 'item_id',
           'item_name', 'item_price', 'amount', 'sold_at']

