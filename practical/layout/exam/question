作って欲しいスクリプト
ターミナル から操作して、タスクを管理できるスクリプトを作ります。

以下4つの操作ができるようにしてください。

*タスクを一覧表示する
*タスクを追加する
*タスクを完了にする
*完了したタスクを消去する



タスクを一覧表示

以下のようにターミナルから実行すると、タスクの一覧を表示するようにしてください。

$ python todo.py list

以下のように、管理されているタスクを表示します。

# Todo
* 牛乳を買う
* Pythonを勉強する

# Done
* Pythonの本を読む

# Todo と表示
* に続いて、追加した未完了のタスク（の本文）を表示
空行
# Done と表示
* に続いて、完了にしたタスク（の本文）を表示



タスクを追加

以下のようにターミナルから実行すると、タスクを追加できるようにしてください。

$ python todo.py add 牛乳を買う

未完了のタスクを追加します。
todo.py add に続けて、タスクの「本文」を入力します。




タスクを完了

以下のようにターミナルから実行すると、タスクを完了できるようにしてください。

$ python todo.py done 牛乳を買う

追加済みのタスクを「完了」にします。
todo.py done に続けて、追加済みのタスクを指定します。
タスクの「本文」と一致するタスクがある場合、そのタスクを「完了」にします。




完了したタスクを消去

以下のようにターミナルから実行すると、完了しているタスクを消去できるようにしてください。

$ python todo.py clear

「完了」となっているタスクを全て消去します。
未完了のタスクは消去しません。




ファイルの形式

以下のような JSON形式 のファイルで、タスクを保存します。

{
  "tasks": [
    {
      "body": "牛乳を買う",
      "done": false
    },
    {
      "body": "Pythonを勉強する",
      "done": false
    },
    {
      "body": "Pythonの本を読む",
      "done": true
    }
  ]
}

tasks: 現在管理されているタスクをリストで持ちます
body: タスクの本文です。 tasks.py add ... に指定された本文の文字列を保存します
done: true/falseの値で、タスクが完了している場合trueになります
エンコーディングはUTF-8で、ファイル名は ./tasks.json で保存してください。



ヒント

JSONファイルの読み書き

PythonにはJSON形式のファイルを扱う json というライブラリーがあります。
このライブラリーを使うことで tasks.json の読み書きがとても簡単に行なえます。

JSONファイルの読み込み

import json


with open('./tasks.json', encoding="utf-8") as f:
    data = json.load(f)

print(data['tasks'])  # タスク一覧（辞書のリスト）を表示
print(data['tasks'][0])  # 1つめのタスク（辞書）を表示
print(data['tasks'][0]['body'])  # "牛乳を買う" を表示
print(data['tasks'][0]['done'])  # False を表示




JSONファイルの書き込み

import json

with open('./tasks.json', mode='w', encoding='utf-8') as f:
    json.dump({
        "tasks": [
            {"body": "牛乳を買う",
             "done": True}
        ]
    }, f)

公式ドキュメントも参考にしてください。

19.2. json — JSON エンコーダおよびデコーダ




ファイルの追加

ターミナル を開いて以下のように実行することで新規にファイルを作成できます。

$ touch <ファイル名>

ファイルを削除するにはクエストでの編集をリセットする必要があります。

argparseでのサブコマンド

今回の todo.py は list 、 add など、それぞれの動作に応じて引数が変わります。
たとえば list のときは何も受け取りませんが、 add の場合はタスクの本文を受け取ります。

python todo.py list
python todo.py add 牛乳を買う

このように第1引数の違いで後ろに続く引数の受け取り方が大きく変わる場合は argparse のサブパーサーという機能が使えます。


16.4.5.1. サブコマンド

この機能を使っても使わなくてもどちらでも良いですが、参考にしてください。
