前の問題では2箇所同じ処理があった「CSVの読み込み」処理を関数にまとめました。
この問題では「CSVへの書き込み」処理を関数にまとめましょう。

CSVへの書き込みは「売上データのファイルへの書き出し処理」以外では使われていません。
ですが以下のような利点があるので関数に分離しましょう。

*CSV形式でファイルへの書き込みという処理はより汎用的に使える
*「売上データ」はCSVで書き出すということが明確になる

単に共通の処理をまとめるだけでなく「CSV（という一般的なファイル形式）の書き出し」処理であると捉えて関数を作っています。
このように関数は「役割」や「再利用性」、「汎用性」に注目して分離しましょう。



write_csv という、 read_csv の対となる関数に分離しました。
今回は2箇所に書かれた処理を関数にまとめるわけでなく、もともと1箇所の処理を関数に分離しています。
これも「役割」に注目した関数の分離方法です。単に「同じ処理だから」という理由だけでなく、「CSVファイルへの書き込み」という役割で関数にしています。

*役割: CSV形式のファイルを書き込む
*入力: 書き込み対象のファイル f と書き込むデータ data 、カラムの順序 columns
*出力: ファイルへCSV形式での書き込み

write_csv 関数は何も return しません。
代わりに指定されたファイル f へCSVを出力します。
辞書のリスト data を、 columns リストに渡された順序でCSVの各カラムに書き込みます。
