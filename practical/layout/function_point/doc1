前回までのクエストで、元々あったプログラムを「まとまり」ごとに分割して読みやすくしました。

今回のクエストでは共通の処理やまとまりを関数に分離していきましょう。
「関数に分ける意味ってあるの？」「関数ってどこで分ければ良いの？」という疑問への答えになると嬉しいです。

対象になるプログラムは引き続き変わりません。仕様は以下を参照してください。


売上データ変換プログラムの仕様

まず一般的な、重複する処理の「共通化」をしてみましょう。
現状のプログラムでは「CSVを読み込む」という処理が2箇所あります。

商品マスター（CSV）の読み込み
売上生データ（CSV）の読み込み
CSVファイルという形式は同じなので「CSVファイルを読み込む関数」として1つにまとめて、
それぞれの処理から呼び出すようにしましょう。




read_csv 関数にCSVファイルを読み込む処理をまとめました。
read_csv 関数は引数に以下を受け取ります。

f: 読み込むCSVファイルのファイルオブジェクト
columns: CSVファイルのカラムの名前（文字列のリスト）
読み込んだCSVファイルの値を、辞書のリストで返します。
たとえば items.csv を読み込んだ場合は以下のような値を返します。
1つ1つの辞書がCSVの各行に対応しています。

return [
    {'item_id': '1', 'name': '商品名', 'price': '300'},
    {...},
]

商品マスターデータCSVと、売上生データCSVの読み込みの両方でこの read_csv 関数が使えます。





コラム: 同じ処理があれば全て関数にまとめたほうが良い？

いいえ。単純に「同じ処理だから」という理由だけで共通の関数にするのはオススメしません。
今回の場合、処理が共通なだけでなく「CSVファイルの読み込み」という一般的な処理をするため、関数に置き換えています。
このように関数に分離する場合はその「関数の役割」に注目することが大切です。

*役割: CSV形式のファイルを読み込む
*入力: ファイル f と、カラムの順序 columns
*出力: 関数の返り値としてファイル各行を1つの辞書としたリストを返す

このような役割と入出力を明確に説明できる場合は関数に分離すると良いでしょう。
端的に表現できない場合は無理に関数にすると余計に読みにくくなる場合が多いです。
