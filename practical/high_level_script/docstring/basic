from datetime import date
from datetime import timedelta


def date_range(from_date, to_date, step_days=1):
    """日付版の range 関数。
    from_date から to_date までの日付を、 step_days に指定された日ごとに返します。

    >>> from datetime import date
    >>> g = date_range(date(2016, 1, 3), date(2016, 1, 8), step_days=1)
    >>> next(g)
    date(2016, 1, 3)
    >>> next(g)
    ...
    >>> next(g)
    date(2016, 1, 7)
	
    from_date, to_date は date オブジェクトか、 datetime オブジェクトが使えます。
    """
    current = from_date
    while from_date <= current < to_date:
        yield current
        current += timedelta(days=step_days)

#http://ailaby.com/yield/

if __name__ == '__main__':
    g = date_range(date(2016, 1, 3), date(2016, 1, 8), step_days=1)
    print(next(g))
    print(next(g))






docstringは関数、Pythonファイルにつける説明文です。

ソースコードを見たときに、関数の中身をすべて読まずに内容を理解できたり、
コードを理解する手助けになったりします。

def some_func():
   """ この、関数の最初に付いている文字列の部分が docstring です
   """

docstringはプログラムの動作には影響しません。




docstringを書くポイント

docstringはソースコード内に書かれるドキュメントです。
他の人や数ヶ月後の自分が読んだときに助かるように書きましょう。
分かりやすく簡潔で、欲しい情報が明確なdocstringが良いです。

何をするものかを端的に書く
引数の説明を書く
返り値を書く
入出力の例を書く
副作用がある場合（関数の外に影響する場合）は明記する
たとえば、以下のような流れで書けます。

def date_range(from_date, to_date, step_days=1):
    """
    {{ 一行説明 }}
    {{ 説明。引数と返り値を明記すると良いです }}

    >>> ...  # 入出力の例
    >>> ...

    {{ その他注意点や副作用 }}
    """

チームによってはdocstringの書き方をルールにしていたりします。
ルールに則ってdocstringを書くと、コードのハイライトや入力補完に活用してくれるエディタや開発環境もあります。




コメントとの違い

コメントはプログラムを読む際に役に立つ説明や、コード上の意図の説明に使えます。

コードのまとまりでやろうとしてること
複雑な処理などの場合、なぜその書き方をしているのかの意図
# TODO: この書き方はバグを誘発するので良くない など、将来に残すメモ書き
docstringは対して、ドキュメントです。
Pythonファイル、関数の仕様、動作、入出力を書くものです。

コメントはコード上の書き方や意図について説明、補完するものであって、
docstringはPythonファイル、関数のあるべき姿、求められているものを書くものです。
