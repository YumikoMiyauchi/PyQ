import unittest

from main import myabs


class TestAbs(unittest.TestCase):
    def test__positive(self):
        self.assertEqual(myabs(4),4)

    def test__negative(self):
        self.assertEqual(myabs(-4),4)
        
        
        
#############main.py#######################
def myabs(num):
    """ 絶対値を計算する関数
    num がゼロ以上の整数はそのまま返す。負の整数は正にして返す。
    """
    if num >= 0:
        return num
    else:
        return -num



すべての処理を呼び出す

テスト対象内の行すべてを通れば良いという、命令網羅という考え方があります。
「テストをどこまで書くか」と悩んだ場合、とりあえず命令網羅をしておくと良いです。

下の絶対値を計算する関数 myabs の場合、 num が「ゼロ以上の場合」と「マイナスの場合」があればすべての行を網羅できます。
この場合一般的に「網羅率（カバレッジ）が100％」と言います。


仕様から考える

コードの中身を見たときの網羅性でなく、求められている仕様を満たしているか考える方法もあります。
「絶対値を計算する関数」の場合「ゼロ以上の整数はそのまま返す。負の整数は正にして返す」という仕様になりそうです。
そうするとテストすべき値はnumが「ゼロ以上の場合」と「マイナスの場合」ですね。

このようにコードを見ずに仕様からテストを考えるのを「ブラックボックステスト」と言います。
コードを見てテストをするのは「ホワイトボックステスト」と言います。

もちろんこの観点も、あくまでも目安です。
原理主義的になると本質（プログラミングを通して価値を生み出すこと）を見失うので注意してください。
