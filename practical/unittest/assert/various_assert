import unittest

from main import get_none, get_num, get_list, raise_value_error

class TestGetNone(unittest.TestCase):
    def test__get(self):
        self.assertIsNone(get_none())
        
class TestGetNum(unittest.TestCase):
    def test__num(self):
        actual = get_num()
        # 0-9の整数が返るので、その範囲でだけテストをする
        self.assertGreaterEqual(actual, 0)
        
class TestGetList(unittest.TestCase):
    def test__list(self):
        actual = get_list()
        self.assertEqual(len(actual),5) # 長さは5
        self.assertIn(0, actual) # 0は必ず含む
        # 返った数のリストを集合にすると、候補の数の部分集合になる
        # リストの最大長が5なので候補の集合と同値にはならない
        self.assertLess(set(actual), {0,1,2,3,4,5,6,7,8,9})
        
class GetRaiseValueError(unittest.TestCase):
    def test__raise(self):
        with self.assertRaises(ValueError):
            raise_value_error()
            
            
            
            

assertEqual: == かどうか
assertIsNone: is None かどうか
assertTrue / False: 真かどうか
assertGreater / Less / GreaterEqual / LessEqual: > かどうか
assertIn / NotIn: ... in ... かどうか
assertRaises: with 内で例外をあげるか

assertRaisesで例外の確認
assertRaises は例外をあげるかどうかを確認できます。 with 文の中で例外をあげるであろうテスト対象を呼び出します

self.assertRaises(ValueError):
    func_may_raise_error()

例外をあげれば合格です。



曖昧に確認する

テスト対象の返り値がランダムであったり、仕様上厳密でない場合は曖昧に確認するのもアリです。
上の TestGetNum や TestGetList がその例です。ランダムな値なので assertEqual(actual, 8) のように確認できません。
代わりに仕様の範囲内に返り値が収まっているかを、 assertLess や assertIn を使って確認しています。
テストに不備があれば、タイミングによって合格したりしなかったりします。その場合はテストを修正しましょう。
